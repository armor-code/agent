# Example values file for deploying multiple ArmorCode Web Agents
# Each agent will have its own API key

# Common configuration for all agents
agentDefaults:
  # ArmorCode server URL - common for all agents
  serverUrl: https://qa.armorcode.ai
  
  # Enable debug mode
  debugMode: true
  
  # Request timeout in seconds
  timeout: 30
  
  # Whether to verify SSL certificates
  verify: false
  
  # Thread pool size
  poolSize: 5
  
  # Whether to upload directly to ArmorCode
  uploadToAc: true

# Turn off single deployment mode
singleDeployment:
  enabled: false

# Enable multiple deployments mode
multipleDeployments:
  enabled: true
  
  # List of deployments with unique names and API keys
  instances:
    # First agent - Production environment
    - name: prod
      apiKey: 82305e3a-cc44-4f17-ab51-638b24d8bbe6
      envName: production
      
    # Second agent - Staging environment  
    - name: staging
      apiKey: 82305e3a-cc44-4f17-ab51-638b24d8bbe6
      envName: staging
      
    # Third agent - Development environment
    - name: dev
      apiKey: 82305e3a-cc44-4f17-ab51-638b24d8bbe6
      envName: development

# Use local built image
image:
  repository: armorcode-web-agent
  tag: local
  pullPolicy: Never  # Never pull from registry, use local image only

# Persistence configuration for logs and agent data

efs:
  enabled: true
  fileSystemId: ""  # Replace with your EFS ID
  region: "us-east-1"
  accessPointId: ""  # Optional: Use existing access point
  
  # Storage Class Configuration
  storageClass:
    name: "efs-sc"
    provisioner: "efs.csi.aws.com"
    parameters:
      provisioningMode: "efs-ap"
      directoryPerms: "0755"
      # basePath: "/tmp/armorcode"
      # subPathExpr: "${.PVC.namespace}/${.PVC.name}"
    reclaimPolicy: "Retain"
    allowVolumeExpansion: true
    volumeBindingMode: "Immediate"

  # PVC Configuration
  persistence:
    enabled: true
    storageClassName: "efs-sc"
    accessMode: ReadWriteMany
    size: 5Gi
# persistence:
#   enabled: true
#   # ReadWriteMany allows pods on different nodes to access the same volume
#   accessMode: ReadWriteMany
#   # Empty storageClassName uses the cluster's default
#   # Recommended classes by platform:
#   # - AWS: "efs"
#   # - GCP: "filestore"
#   # - Azure: "azurefile"
#   # - On-prem: "nfs"
#   storageClassName: ""
#   size: 5Gi

# Network policy configuration
networkPolicy:
  enabled: true
  spec:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: armorcode-web-agent
    policyTypes:
      - Egress
    egress:
      # Allow DNS resolution
      - to:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
        ports:
          - port: 53
            protocol: UDP
          - port: 53
            protocol: TCP
      
      # Allow HTTPS to all external destinations
      - to:
        - ipBlock:
            cidr: 0.0.0.0/0
        ports:
          - port: 443
            protocol: TCP
serviceAccount:
  create: true